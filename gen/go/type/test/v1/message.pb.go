// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: type/test/v1/message.proto

package testv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestSignal int32

const (
	TestSignal_TEST_SIGNAL_UNSPECIFIED TestSignal = 0
	TestSignal_TEST_SIGNAL_START_TEST  TestSignal = 1
)

// Enum value maps for TestSignal.
var (
	TestSignal_name = map[int32]string{
		0: "TEST_SIGNAL_UNSPECIFIED",
		1: "TEST_SIGNAL_START_TEST",
	}
	TestSignal_value = map[string]int32{
		"TEST_SIGNAL_UNSPECIFIED": 0,
		"TEST_SIGNAL_START_TEST":  1,
	}
)

func (x TestSignal) Enum() *TestSignal {
	p := new(TestSignal)
	*p = x
	return p
}

func (x TestSignal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSignal) Descriptor() protoreflect.EnumDescriptor {
	return file_type_test_v1_message_proto_enumTypes[0].Descriptor()
}

func (TestSignal) Type() protoreflect.EnumType {
	return &file_type_test_v1_message_proto_enumTypes[0]
}

func (x TestSignal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestSignal.Descriptor instead.
func (TestSignal) EnumDescriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{0}
}

type ExecutionEvent_Type int32

const (
	ExecutionEvent_TYPE_UNSPECIFIED              ExecutionEvent_Type = 0
	ExecutionEvent_TYPE_TEST_EXECUTION_SCHEDULED ExecutionEvent_Type = 1
	ExecutionEvent_TYPE_TEST_EXECUTION_STARTED   ExecutionEvent_Type = 2
	ExecutionEvent_TYPE_TEST_EXECUTION_FINISHED  ExecutionEvent_Type = 3
	ExecutionEvent_TYPE_CASE_EXECUTION_SCHEDULED ExecutionEvent_Type = 4
	ExecutionEvent_TYPE_CASE_EXECUTION_STARTED   ExecutionEvent_Type = 5
	ExecutionEvent_TYPE_CASE_EXECUTION_FINISHED  ExecutionEvent_Type = 6
	ExecutionEvent_TYPE_EXECUTION_LOG_PUBLISHED  ExecutionEvent_Type = 7
)

// Enum value maps for ExecutionEvent_Type.
var (
	ExecutionEvent_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_TEST_EXECUTION_SCHEDULED",
		2: "TYPE_TEST_EXECUTION_STARTED",
		3: "TYPE_TEST_EXECUTION_FINISHED",
		4: "TYPE_CASE_EXECUTION_SCHEDULED",
		5: "TYPE_CASE_EXECUTION_STARTED",
		6: "TYPE_CASE_EXECUTION_FINISHED",
		7: "TYPE_EXECUTION_LOG_PUBLISHED",
	}
	ExecutionEvent_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":              0,
		"TYPE_TEST_EXECUTION_SCHEDULED": 1,
		"TYPE_TEST_EXECUTION_STARTED":   2,
		"TYPE_TEST_EXECUTION_FINISHED":  3,
		"TYPE_CASE_EXECUTION_SCHEDULED": 4,
		"TYPE_CASE_EXECUTION_STARTED":   5,
		"TYPE_CASE_EXECUTION_FINISHED":  6,
		"TYPE_EXECUTION_LOG_PUBLISHED":  7,
	}
)

func (x ExecutionEvent_Type) Enum() *ExecutionEvent_Type {
	p := new(ExecutionEvent_Type)
	*p = x
	return p
}

func (x ExecutionEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_type_test_v1_message_proto_enumTypes[1].Descriptor()
}

func (ExecutionEvent_Type) Type() protoreflect.EnumType {
	return &file_type_test_v1_message_proto_enumTypes[1]
}

func (x ExecutionEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionEvent_Type.Descriptor instead.
func (ExecutionEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{6, 0}
}

type ExecutionEvent_Data_Type int32

const (
	ExecutionEvent_Data_TYPE_UNSPECIFIED    ExecutionEvent_Data_Type = 0
	ExecutionEvent_Data_TYPE_NONE           ExecutionEvent_Data_Type = 1
	ExecutionEvent_Data_TYPE_TEST_EXECUTION ExecutionEvent_Data_Type = 2
	ExecutionEvent_Data_TYPE_CASE_EXECUTION ExecutionEvent_Data_Type = 3
	ExecutionEvent_Data_TYPE_EXECUTION_LOG  ExecutionEvent_Data_Type = 4
)

// Enum value maps for ExecutionEvent_Data_Type.
var (
	ExecutionEvent_Data_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_NONE",
		2: "TYPE_TEST_EXECUTION",
		3: "TYPE_CASE_EXECUTION",
		4: "TYPE_EXECUTION_LOG",
	}
	ExecutionEvent_Data_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":    0,
		"TYPE_NONE":           1,
		"TYPE_TEST_EXECUTION": 2,
		"TYPE_CASE_EXECUTION": 3,
		"TYPE_EXECUTION_LOG":  4,
	}
)

func (x ExecutionEvent_Data_Type) Enum() *ExecutionEvent_Data_Type {
	p := new(ExecutionEvent_Data_Type)
	*p = x
	return p
}

func (x ExecutionEvent_Data_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionEvent_Data_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_type_test_v1_message_proto_enumTypes[2].Descriptor()
}

func (ExecutionEvent_Data_Type) Type() protoreflect.EnumType {
	return &file_type_test_v1_message_proto_enumTypes[2]
}

func (x ExecutionEvent_Data_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionEvent_Data_Type.Descriptor instead.
func (ExecutionEvent_Data_Type) EnumDescriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{6, 0, 0}
}

type TestDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project        string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DefaultPayload *Payload `protobuf:"bytes,3,opt,name=default_payload,json=defaultPayload,proto3,oneof" json:"default_payload,omitempty"`
}

func (x *TestDefinition) Reset() {
	*x = TestDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_test_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDefinition) ProtoMessage() {}

func (x *TestDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_type_test_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDefinition.ProtoReflect.Descriptor instead.
func (*TestDefinition) Descriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *TestDefinition) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestDefinition) GetDefaultPayload() *Payload {
	if x != nil {
		return x.DefaultPayload
	}
	return nil
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Project       string                 `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	HasPayload    bool                   `protobuf:"varint,4,opt,name=has_payload,json=hasPayload,proto3" json:"has_payload,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastAvailable *TestRunner            `protobuf:"bytes,6,opt,name=last_available,json=lastAvailable,proto3" json:"last_available,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_test_v1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_type_test_v1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *Test) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Test) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Test) GetHasPayload() bool {
	if x != nil {
		return x.HasPayload
	}
	return false
}

func (x *Test) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Test) GetLastAvailable() *TestRunner {
	if x != nil {
		return x.LastAvailable
	}
	return nil
}

type TestExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestId      string                 `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Error       *string                `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
	ScheduledAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	StartedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=finished_at,json=finishedAt,proto3,oneof" json:"finished_at,omitempty"`
}

func (x *TestExecution) Reset() {
	*x = TestExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_test_v1_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExecution) ProtoMessage() {}

func (x *TestExecution) ProtoReflect() protoreflect.Message {
	mi := &file_type_test_v1_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExecution.ProtoReflect.Descriptor instead.
func (*TestExecution) Descriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *TestExecution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestExecution) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestExecution) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *TestExecution) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *TestExecution) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *TestExecution) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

type CaseExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CaseName    string                 `protobuf:"bytes,2,opt,name=case_name,json=caseName,proto3" json:"case_name,omitempty"`
	TestExecId  string                 `protobuf:"bytes,3,opt,name=test_exec_id,json=testExecId,proto3" json:"test_exec_id,omitempty"`
	Error       *string                `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
	ScheduledAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	StartedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	FinishedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=finished_at,json=finishedAt,proto3,oneof" json:"finished_at,omitempty"`
}

func (x *CaseExecution) Reset() {
	*x = CaseExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_test_v1_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseExecution) ProtoMessage() {}

func (x *CaseExecution) ProtoReflect() protoreflect.Message {
	mi := &file_type_test_v1_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseExecution.ProtoReflect.Descriptor instead.
func (*CaseExecution) Descriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *CaseExecution) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CaseExecution) GetCaseName() string {
	if x != nil {
		return x.CaseName
	}
	return ""
}

func (x *CaseExecution) GetTestExecId() string {
	if x != nil {
		return x.TestExecId
	}
	return ""
}

func (x *CaseExecution) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *CaseExecution) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *CaseExecution) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *CaseExecution) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

type ExecutionLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestExecId string                 `protobuf:"bytes,2,opt,name=test_exec_id,json=testExecId,proto3" json:"test_exec_id,omitempty"`
	CaseExecId *int32                 `protobuf:"varint,3,opt,name=case_exec_id,json=caseExecId,proto3,oneof" json:"case_exec_id,omitempty"`
	Level      string                 `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	Message    string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ExecutionLog) Reset() {
	*x = ExecutionLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_test_v1_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionLog) ProtoMessage() {}

func (x *ExecutionLog) ProtoReflect() protoreflect.Message {
	mi := &file_type_test_v1_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionLog.ProtoReflect.Descriptor instead.
func (*ExecutionLog) Descriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *ExecutionLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecutionLog) GetTestExecId() string {
	if x != nil {
		return x.TestExecId
	}
	return ""
}

func (x *ExecutionLog) GetCaseExecId() int32 {
	if x != nil && x.CaseExecId != nil {
		return *x.CaseExecId
	}
	return 0
}

func (x *ExecutionLog) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *ExecutionLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExecutionLog) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata map[string][]byte `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data     []byte            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IsZero   bool              `protobuf:"varint,3,opt,name=is_zero,json=isZero,proto3" json:"is_zero,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_test_v1_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_type_test_v1_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *Payload) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Payload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Payload) GetIsZero() bool {
	if x != nil {
		return x.IsZero
	}
	return false
}

type ExecutionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TestExecId string                 `protobuf:"bytes,2,opt,name=test_exec_id,json=testExecId,proto3" json:"test_exec_id,omitempty"`
	Type       ExecutionEvent_Type    `protobuf:"varint,3,opt,name=type,proto3,enum=type.test.v1.ExecutionEvent_Type" json:"type,omitempty"`
	Data       *ExecutionEvent_Data   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *ExecutionEvent) Reset() {
	*x = ExecutionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_test_v1_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionEvent) ProtoMessage() {}

func (x *ExecutionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_type_test_v1_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionEvent.ProtoReflect.Descriptor instead.
func (*ExecutionEvent) Descriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *ExecutionEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ExecutionEvent) GetTestExecId() string {
	if x != nil {
		return x.TestExecId
	}
	return ""
}

func (x *ExecutionEvent) GetType() ExecutionEvent_Type {
	if x != nil {
		return x.Type
	}
	return ExecutionEvent_TYPE_UNSPECIFIED
}

func (x *ExecutionEvent) GetData() *ExecutionEvent_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecutionEvent) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type TestRunner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LastHeartbeat *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
	IsActive      bool                   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *TestRunner) Reset() {
	*x = TestRunner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_test_v1_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRunner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRunner) ProtoMessage() {}

func (x *TestRunner) ProtoReflect() protoreflect.Message {
	mi := &file_type_test_v1_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRunner.ProtoReflect.Descriptor instead.
func (*TestRunner) Descriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *TestRunner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestRunner) GetLastHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

func (x *TestRunner) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type ExecutionEvent_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ExecutionEvent_Data_Type `protobuf:"varint,1,opt,name=type,proto3,enum=type.test.v1.ExecutionEvent_Data_Type" json:"type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*ExecutionEvent_Data_TestExecution
	//	*ExecutionEvent_Data_CaseExecution
	//	*ExecutionEvent_Data_ExecutionLog
	Data isExecutionEvent_Data_Data `protobuf_oneof:"data"`
}

func (x *ExecutionEvent_Data) Reset() {
	*x = ExecutionEvent_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_test_v1_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionEvent_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionEvent_Data) ProtoMessage() {}

func (x *ExecutionEvent_Data) ProtoReflect() protoreflect.Message {
	mi := &file_type_test_v1_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionEvent_Data.ProtoReflect.Descriptor instead.
func (*ExecutionEvent_Data) Descriptor() ([]byte, []int) {
	return file_type_test_v1_message_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ExecutionEvent_Data) GetType() ExecutionEvent_Data_Type {
	if x != nil {
		return x.Type
	}
	return ExecutionEvent_Data_TYPE_UNSPECIFIED
}

func (m *ExecutionEvent_Data) GetData() isExecutionEvent_Data_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ExecutionEvent_Data) GetTestExecution() *TestExecution {
	if x, ok := x.GetData().(*ExecutionEvent_Data_TestExecution); ok {
		return x.TestExecution
	}
	return nil
}

func (x *ExecutionEvent_Data) GetCaseExecution() *CaseExecution {
	if x, ok := x.GetData().(*ExecutionEvent_Data_CaseExecution); ok {
		return x.CaseExecution
	}
	return nil
}

func (x *ExecutionEvent_Data) GetExecutionLog() *ExecutionLog {
	if x, ok := x.GetData().(*ExecutionEvent_Data_ExecutionLog); ok {
		return x.ExecutionLog
	}
	return nil
}

type isExecutionEvent_Data_Data interface {
	isExecutionEvent_Data_Data()
}

type ExecutionEvent_Data_TestExecution struct {
	TestExecution *TestExecution `protobuf:"bytes,2,opt,name=test_execution,json=testExecution,proto3,oneof"`
}

type ExecutionEvent_Data_CaseExecution struct {
	CaseExecution *CaseExecution `protobuf:"bytes,3,opt,name=case_execution,json=caseExecution,proto3,oneof"`
}

type ExecutionEvent_Data_ExecutionLog struct {
	ExecutionLog *ExecutionLog `protobuf:"bytes,4,opt,name=execution_log,json=executionLog,proto3,oneof"`
}

func (*ExecutionEvent_Data_TestExecution) isExecutionEvent_Data_Data() {}

func (*ExecutionEvent_Data_CaseExecution) isExecutionEvent_Data_Data() {}

func (*ExecutionEvent_Data_ExecutionLog) isExecutionEvent_Data_Data() {}

var File_type_test_v1_message_proto protoreflect.FileDescriptor

var file_type_test_v1_message_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x0e,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x0d, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xe3, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0c,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0c, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x22, 0xb4, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x07, 0x0a, 0x0e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x90, 0x03, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x22, 0x75, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x04, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x10, 0x07, 0x22, 0x7c, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x2a, 0x45, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x42, 0xad, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x68,
	0x71, 0x2f, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76,
	0x31, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x54, 0x58, 0xaa, 0x02,
	0x0c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c,
	0x54, 0x79, 0x70, 0x65, 0x5c, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x54,
	0x79, 0x70, 0x65, 0x5c, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x3a,
	0x54, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_type_test_v1_message_proto_rawDescOnce sync.Once
	file_type_test_v1_message_proto_rawDescData = file_type_test_v1_message_proto_rawDesc
)

func file_type_test_v1_message_proto_rawDescGZIP() []byte {
	file_type_test_v1_message_proto_rawDescOnce.Do(func() {
		file_type_test_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_type_test_v1_message_proto_rawDescData)
	})
	return file_type_test_v1_message_proto_rawDescData
}

var file_type_test_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_type_test_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_type_test_v1_message_proto_goTypes = []interface{}{
	(TestSignal)(0),               // 0: type.test.v1.TestSignal
	(ExecutionEvent_Type)(0),      // 1: type.test.v1.ExecutionEvent.Type
	(ExecutionEvent_Data_Type)(0), // 2: type.test.v1.ExecutionEvent.Data.Type
	(*TestDefinition)(nil),        // 3: type.test.v1.TestDefinition
	(*Test)(nil),                  // 4: type.test.v1.Test
	(*TestExecution)(nil),         // 5: type.test.v1.TestExecution
	(*CaseExecution)(nil),         // 6: type.test.v1.CaseExecution
	(*ExecutionLog)(nil),          // 7: type.test.v1.ExecutionLog
	(*Payload)(nil),               // 8: type.test.v1.Payload
	(*ExecutionEvent)(nil),        // 9: type.test.v1.ExecutionEvent
	(*TestRunner)(nil),            // 10: type.test.v1.TestRunner
	nil,                           // 11: type.test.v1.Payload.MetadataEntry
	(*ExecutionEvent_Data)(nil),   // 12: type.test.v1.ExecutionEvent.Data
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_type_test_v1_message_proto_depIdxs = []int32{
	8,  // 0: type.test.v1.TestDefinition.default_payload:type_name -> type.test.v1.Payload
	13, // 1: type.test.v1.Test.created_at:type_name -> google.protobuf.Timestamp
	10, // 2: type.test.v1.Test.last_available:type_name -> type.test.v1.TestRunner
	13, // 3: type.test.v1.TestExecution.scheduled_at:type_name -> google.protobuf.Timestamp
	13, // 4: type.test.v1.TestExecution.started_at:type_name -> google.protobuf.Timestamp
	13, // 5: type.test.v1.TestExecution.finished_at:type_name -> google.protobuf.Timestamp
	13, // 6: type.test.v1.CaseExecution.scheduled_at:type_name -> google.protobuf.Timestamp
	13, // 7: type.test.v1.CaseExecution.started_at:type_name -> google.protobuf.Timestamp
	13, // 8: type.test.v1.CaseExecution.finished_at:type_name -> google.protobuf.Timestamp
	13, // 9: type.test.v1.ExecutionLog.created_at:type_name -> google.protobuf.Timestamp
	11, // 10: type.test.v1.Payload.metadata:type_name -> type.test.v1.Payload.MetadataEntry
	1,  // 11: type.test.v1.ExecutionEvent.type:type_name -> type.test.v1.ExecutionEvent.Type
	12, // 12: type.test.v1.ExecutionEvent.data:type_name -> type.test.v1.ExecutionEvent.Data
	13, // 13: type.test.v1.ExecutionEvent.create_time:type_name -> google.protobuf.Timestamp
	13, // 14: type.test.v1.TestRunner.last_heartbeat:type_name -> google.protobuf.Timestamp
	2,  // 15: type.test.v1.ExecutionEvent.Data.type:type_name -> type.test.v1.ExecutionEvent.Data.Type
	5,  // 16: type.test.v1.ExecutionEvent.Data.test_execution:type_name -> type.test.v1.TestExecution
	6,  // 17: type.test.v1.ExecutionEvent.Data.case_execution:type_name -> type.test.v1.CaseExecution
	7,  // 18: type.test.v1.ExecutionEvent.Data.execution_log:type_name -> type.test.v1.ExecutionLog
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_type_test_v1_message_proto_init() }
func file_type_test_v1_message_proto_init() {
	if File_type_test_v1_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_type_test_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_test_v1_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_test_v1_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_test_v1_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_test_v1_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_test_v1_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_test_v1_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_test_v1_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRunner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_test_v1_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionEvent_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_type_test_v1_message_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_type_test_v1_message_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_type_test_v1_message_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_type_test_v1_message_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_type_test_v1_message_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ExecutionEvent_Data_TestExecution)(nil),
		(*ExecutionEvent_Data_CaseExecution)(nil),
		(*ExecutionEvent_Data_ExecutionLog)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_type_test_v1_message_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_type_test_v1_message_proto_goTypes,
		DependencyIndexes: file_type_test_v1_message_proto_depIdxs,
		EnumInfos:         file_type_test_v1_message_proto_enumTypes,
		MessageInfos:      file_type_test_v1_message_proto_msgTypes,
	}.Build()
	File_type_test_v1_message_proto = out.File
	file_type_test_v1_message_proto_rawDesc = nil
	file_type_test_v1_message_proto_goTypes = nil
	file_type_test_v1_message_proto_depIdxs = nil
}

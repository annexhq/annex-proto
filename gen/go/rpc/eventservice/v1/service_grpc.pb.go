// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: rpc/eventservice/v1/service.proto

package eventservicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EventService_StreamTestExecutionEvents_FullMethodName = "/rpc.eventservice.v1.EventService/StreamTestExecutionEvents"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	StreamTestExecutionEvents(ctx context.Context, in *StreamTestExecutionEventsRequest, opts ...grpc.CallOption) (EventService_StreamTestExecutionEventsClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) StreamTestExecutionEvents(ctx context.Context, in *StreamTestExecutionEventsRequest, opts ...grpc.CallOption) (EventService_StreamTestExecutionEventsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], EventService_StreamTestExecutionEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceStreamTestExecutionEventsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_StreamTestExecutionEventsClient interface {
	Recv() (*StreamTestExecutionEventsResponse, error)
	grpc.ClientStream
}

type eventServiceStreamTestExecutionEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceStreamTestExecutionEventsClient) Recv() (*StreamTestExecutionEventsResponse, error) {
	m := new(StreamTestExecutionEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations should embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	StreamTestExecutionEvents(*StreamTestExecutionEventsRequest, EventService_StreamTestExecutionEventsServer) error
}

// UnimplementedEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) StreamTestExecutionEvents(*StreamTestExecutionEventsRequest, EventService_StreamTestExecutionEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTestExecutionEvents not implemented")
}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_StreamTestExecutionEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTestExecutionEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).StreamTestExecutionEvents(m, &eventServiceStreamTestExecutionEventsServer{ServerStream: stream})
}

type EventService_StreamTestExecutionEventsServer interface {
	Send(*StreamTestExecutionEventsResponse) error
	grpc.ServerStream
}

type eventServiceStreamTestExecutionEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceStreamTestExecutionEventsServer) Send(m *StreamTestExecutionEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.eventservice.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTestExecutionEvents",
			Handler:       _EventService_StreamTestExecutionEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/eventservice/v1/service.proto",
}

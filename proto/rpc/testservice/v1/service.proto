syntax = "proto3";

package rpc.testservice.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "type/test/v1/message.proto";

message RegisterContextRequest {
  string context = 1;
}

message RegisterContextResponse {}

message RegisterGroupRequest {
  string context = 1;
  string name = 2;
}

message RegisterGroupResponse {}

message ListRunnersRequest {
  string context = 1;
  string group = 2;
}

message ListRunnersResponse {
  repeated type.test.v1.Runner runners = 1;
}

message RegisterTestsRequest {
  string context = 1;
  string group = 2;
  repeated type.test.v1.TestDefinition definitions = 4;
}

message RegisterTestsResponse {
  repeated type.test.v1.Test tests = 1;
}

message ListTestsRequest {
  string context = 1;
  string group = 2;
  int32 page_size = 3;
  string next_page_token = 4;
}

message ListTestsResponse {
  repeated type.test.v1.Test tests = 1;
  string next_page_token = 2;
}

message GetTestDefaultInputRequest {
  string context = 1;
  string test_id = 2;
}

message GetTestDefaultInputResponse {
  string default_input = 1;
}

message ExecuteTestRequest {
  string context = 1;
  string test_id = 2;
  optional type.test.v1.Payload input = 3;
}

message ExecuteTestResponse {
  type.test.v1.TestExecution test_execution = 1;
}

message RetryTestExecutionRequest {
  string context = 1;
  string test_execution_id = 2;
}

message RetryTestExecutionResponse {
  type.test.v1.TestExecution test_execution = 1;
}

message GetTestExecutionRequest {
  string context = 1;
  string test_execution_id = 2;
}

message GetTestExecutionResponse {
  type.test.v1.TestExecution test_execution = 1;
  optional type.test.v1.Payload input = 2;
}

message ListTestExecutionsRequest {
  string context = 1;
  string test_id = 2;
  int32 page_size = 3;
  string next_page_token = 4;
}

message ListTestExecutionsResponse {
  repeated type.test.v1.TestExecution test_executions = 1;
  string next_page_token = 2;
}

message ListTestCaseExecutionsRequest {
  string context = 1;
  string test_execution_id = 2;
}

message ListTestCaseExecutionsResponse {
  repeated type.test.v1.CaseExecution case_executions = 1;
}

message AckTestExecutionStartedRequest {
  string context = 1;
  string test_execution_id = 2;
  google.protobuf.Timestamp start_time = 3;
}

message AckTestExecutionStartedResponse {}

message AckTestExecutionFinishedRequest {
  string context = 1;
  string test_execution_id = 2;
  google.protobuf.Timestamp finish_time = 3;
  optional string error = 4;
}

message AckTestExecutionFinishedResponse {}

message AckCaseExecutionScheduledRequest {
  string context = 1;
  string test_execution_id = 2;
  int32 case_execution_id = 3;
  string case_name = 4;
  google.protobuf.Timestamp schedule_time = 5;
}

message AckCaseExecutionScheduledResponse {}

message AckCaseExecutionStartedRequest {
  string context = 1;
  string test_execution_id = 2;
  int32 case_execution_id = 3;
  google.protobuf.Timestamp start_time = 4;
}

message AckCaseExecutionStartedResponse {}

message AckCaseExecutionFinishedRequest {
  string context = 1;
  string test_execution_id = 2;
  int32 case_execution_id = 3;
  google.protobuf.Timestamp finish_time = 4;
  optional string error = 5;
}

message AckCaseExecutionFinishedResponse {}

message PublishTestExecutionLogRequest {
  string context = 1;
  string test_execution_id = 2;
  optional int32 case_execution_id = 3;
  string level = 4;
  string message = 5;
  google.protobuf.Timestamp create_time = 6;
}

message PublishTestExecutionLogResponse {
  string log_id = 1;
}

message ListTestExecutionLogsRequest {
  string context = 1;
  string test_execution_id = 2;
}

message ListTestExecutionLogsResponse {
  repeated type.test.v1.Log logs = 1;
}

service TestService {
  rpc ListRunners(ListRunnersRequest) returns (ListRunnersResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/groups/{group}/runners"};
  }

  rpc ListTests(ListTestsRequest) returns (ListTestsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/tests"};
  }

  rpc GetTestDefaultInput(GetTestDefaultInputRequest) returns (GetTestDefaultInputResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/tests/{test_id}/default-input"};
  }

  rpc ExecuteTest(ExecuteTestRequest) returns (ExecuteTestResponse) {
    option (google.api.http) = {
      post: "/api/v1/contexts/{context}/executions"
      body: "*"
    };
  }

  rpc RetryTestExecution(RetryTestExecutionRequest) returns (RetryTestExecutionResponse) {
    option (google.api.http) = {
      post: "/api/v1/contexts/{context}/executions/{test_execution_id}/retry"
      body: "*"
    };
  }

  rpc GetTestExecution(GetTestExecutionRequest) returns (GetTestExecutionResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/executions/{test_execution_id}"};
  }

  rpc ListTestExecutions(ListTestExecutionsRequest) returns (ListTestExecutionsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/executions"};
  }

  rpc ListTestCaseExecutions(ListTestCaseExecutionsRequest) returns (ListTestCaseExecutionsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/executions/{test_execution_id}/cases"};
  }

  rpc ListTestExecutionLogs(ListTestExecutionLogsRequest) returns (ListTestExecutionLogsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/executions/{test_execution_id}/logs"};
  }

  rpc RegisterContext(RegisterContextRequest) returns (RegisterContextResponse);

  rpc RegisterGroup(RegisterGroupRequest) returns (RegisterGroupResponse);

  rpc RegisterTests(RegisterTestsRequest) returns (RegisterTestsResponse);

  rpc AckTestExecutionStarted(AckTestExecutionStartedRequest) returns (AckTestExecutionStartedResponse);

  rpc AckTestExecutionFinished(AckTestExecutionFinishedRequest) returns (AckTestExecutionFinishedResponse);

  rpc AckCaseExecutionScheduled(AckCaseExecutionScheduledRequest) returns (AckCaseExecutionScheduledResponse);

  rpc AckCaseExecutionStarted(AckCaseExecutionStartedRequest) returns (AckCaseExecutionStartedResponse);

  rpc AckCaseExecutionFinished(AckCaseExecutionFinishedRequest) returns (AckCaseExecutionFinishedResponse);

  rpc PublishTestExecutionLog(PublishTestExecutionLogRequest) returns (PublishTestExecutionLogResponse);
}
